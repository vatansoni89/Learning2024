# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 8080


# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["WebApplication1/WebApplication1.csproj", "WebApplication1/"]
RUN dotnet restore "./WebApplication1/WebApplication1.csproj"
COPY . .
WORKDIR "/src/WebApplication1"
RUN dotnet build "./WebApplication1.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./WebApplication1.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "WebApplication1.dll"]

#Understanding Your Dockerfile Operations
#Overall Structure
#Your Dockerfile is a multi-stage build file which leverages different stages to ensure efficiency, separation of concerns, and optimization of the final Docker image.
#
#Stage Breakdown
#Base Image Stage:
#
#Dockerfile
#
#Kopiuj
#FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
#USER app
#WORKDIR /app
#EXPOSE 8080
#Uses the ASP.NET runtime image.
#
#Sets up a non-root user and the working directory.
#
#Exposes port 8080 for the application.
#
#Build Stage:
#
#Dockerfile
#
#Kopiuj
#FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
#ARG BUILD_CONFIGURATION=Release
#WORKDIR /src
#COPY ["WebApplication1/WebApplication1.csproj", "WebApplication1/"]
#RUN dotnet restore "./WebApplication1/WebApplication1.csproj"
#COPY . .
#WORKDIR "/src/WebApplication1"
#RUN dotnet build "./WebApplication1.csproj" -c $BUILD_CONFIGURATION -o /app/build
#Uses the .NET SDK image to compile your project.
#
#Sets build configuration to Release by default.
#
#Copies the .csproj file to prepare for dependency restoration.
#
#Executes dotnet restore to pull in all necessary dependencies.
#
#Copies all project files into the working directory.
#
#Builds the project, placing output in /app/build.
#
#Publish Stage:
#
#Dockerfile
#
#Kopiuj
#FROM build AS publish
#ARG BUILD_CONFIGURATION=Release
#RUN dotnet publish "./WebApplication1.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false
#Continues from the build stage.
#
#Publishes the built project to /app/publish, ensuring it's optimized for deployment.
#
#Final Image Stage:
#
#Dockerfile
#
#Kopiuj
#FROM base AS final
#WORKDIR /app
#COPY --from=publish /app/publish .
#ENTRYPOINT ["dotnet", "WebApplication1.dll"]
#Uses the base image set up earlier.
#
#Copies the published files from the publish stage.
#
#Sets the entry point to run your application.
#
#Key Commands and Concepts
#WORKDIR: Sets the working directory for subsequent instructions. Paths are relative to this directory.
#
#COPY . .: Copies all files from the current directory on the host to the current working directory in the container. Essential for transferring project files. Docker handles this gracefully: it merges the contents of your local directory with the /src directory in the container, adding and updating files without overwriting the whole folder.
#
#Maintains Restored Dependencies: The restored dependencies remain intact, while the additional project files are added to the existing /src/WebApplication1 folder. This ensures everything needed for the build process is in place without losing whatâ€™s already there.
#
#dotnet build: Compiles the source code into binaries. Output is directed to /app/build.
#
#dotnet publish: Optimizes the compiled application, making it ready for deployment. Output goes to /app/publish.
#
#Multi-Stage Builds: Used to keep the final image lean by discarding intermediate build steps and files not needed for the final container.
#
#This setup ensures a clean separation between stages: the build stage handles compilation, the publish stage optimizes, and the final stage packages everything up for runtime, minimizing unnecessary layers and keeping your image as small and efficient as possible. Anything else you'd like to dive into?
